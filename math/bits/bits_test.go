package bits_test

import (
	"testing"
	"github.com/sw965/omw/math/bits"
	"slices"
)

func TestToggleBit64(t *testing.T) {
	var err error
	b := uint64(0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000)

	b, err = bits.ToggleBit64(b, 24)
	if err != nil {
		panic(err)
	}

	result, err := bits.ToggleBit64(b, 32)
	if err != nil {
		panic(err)
	}

	expected := uint64(0b00000000_00000000_00000000_00000001_00000001_00000000_00000000_00000000)

	if expected != result {
		t.Errorf("テスト失敗")
	}
}

func TestClearLowestBit64(t *testing.T) {
	b := uint64(0b00000000_00100100_00110000_00000001_10000000_00000100_00100000_00010000)

	result1 := bits.ClearLowestBit64(b)
	expected1 := uint64(0b00000000_00100100_00110000_00000001_10000000_00000100_00100000_00000000)
	if expected1 != result1 {
		t.Errorf("テスト失敗")
	}

	result2 := bits.ClearLowestBit64(result1)
	expected2 := uint64(0b00000000_00100100_00110000_00000001_10000000_00000100_00000000_00000000)
	if expected2 != result2 {
		t.Errorf("テスト失敗")
	}
}

func TestExtractLowestBit64(t *testing.T) {
	b := uint64(0b10000000_00001000_00010000_00100000_01000000_00000000_00000000_00000000)
	result := bits.ExtractLowestBit64(b)
	expected := uint64(0b00000000_00000000_00000000_00000000_01000000_00000000_00000000_00000000)

	if expected != result {
		t.Errorf("テスト失敗")
	}
}

func TestOneIndices64(t *testing.T) {
	b := uint64(0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001)
	result := bits.OneIndices64(b)
	expected := []int{
		0, 9, 18, 27, 36, 45, 54, 63,
	}
	if !slices.Equal(expected, result) {
		t.Errorf("テスト失敗")
	}
}

func TestToSingles64(t *testing.T) {
	b := uint64(0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001)
	result := bits.ToSingles64(b)
	expected := []uint64{
		0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001,
		0b00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000000,
		0b00000000_00000000_00000000_00000000_00000000_00000100_00000000_00000000,
		0b00000000_00000000_00000000_00000000_00001000_00000000_00000000_00000000,
		0b00000000_00000000_00000000_00010000_00000000_00000000_00000000_00000000,
		0b00000000_00000000_00100000_00000000_00000000_00000000_00000000_00000000,
		0b00000000_01000000_00000000_00000000_00000000_00000000_00000000_00000000,
		0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000,
	}
	if !slices.Equal(expected, result) {
		t.Errorf("テスト失敗")
	}
}